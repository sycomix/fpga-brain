--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="DEFAULT" LPM_PIPELINE=2 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=14 USE_WYS="ON" aclr(gnd) add_sub cin clken(vcc) clock cout dataa datab result
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION cycloneive_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( DONT_TOUCH, LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);

--synthesis_resources = lut 30 reg 32 
SUBDESIGN add_sub_4ql
( 
	aclr	:	input;
	add_sub	:	input;
	cin	:	input;
	clken	:	input;
	clock	:	input;
	cout	:	output;
	dataa[13..0]	:	input;
	datab[13..0]	:	input;
	result[13..0]	:	output;
) 
VARIABLE 
	add_sub_cella[13..0] : cycloneive_lcell_comb
		WITH (
			LUT_MASK = "96E8",
			SUM_LUTC_INPUT = "cin"
		);
	inter_regrs_cina[0..0] : cycloneive_lcell_comb
		WITH (
			LUT_MASK = "F0F0",
			SUM_LUTC_INPUT = "cin"
		);
	inter_regrs_couta[0..0] : cycloneive_lcell_comb
		WITH (
			LUT_MASK = "00CC"
		);
	pad_cella[13..0] : cycloneive_lcell_comb
		WITH (
			LUT_MASK = "96E8",
			SUM_LUTC_INPUT = "cin"
		);
	add_sub_cell_ffa[13..0] : dffe;
	add_sub_regra[0..0] : dffe;
	cout_sum_regra[1..0] : dffe;
	inter_regrs_cin_ffa[0..0] : dffe;
	pad_cell_ffa[13..0] : dffe;
	const_node_aclr	: NODE;
	const_node_clken	: NODE;

BEGIN 
	add_sub_cella[].cin = ( add_sub_cella[12..7].cout, (! add_sub), add_sub_cella[5..0].cout, cin);
	add_sub_cella[].dataa = dataa[];
	add_sub_cella[].datab = (datab[] $ (! add_sub));
	add_sub_cella[].datad = B"11111111111111";
	inter_regrs_cina[].cin = ( add_sub_cella[6].cout);
	inter_regrs_cina[].dataa = B"1";
	inter_regrs_couta[].cin = B"0";
	inter_regrs_couta[].datab = ( inter_regrs_cin_ffa[0].q);
	inter_regrs_couta[].datad = B"1";
	pad_cella[].cin = ( pad_cella[12..7].cout, inter_regrs_couta[0].cout, pad_cella[5..0].cout, add_sub_regra[0].q);
	pad_cella[].dataa = ( add_sub_cell_ffa[].q);
	pad_cella[].datab = ( add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q, add_sub_regra[0].q);
	pad_cella[].datad = B"11111111111111";
	add_sub_cell_ffa[].clk = clock;
	add_sub_cell_ffa[].d = add_sub_cella[].combout;
	add_sub_regra[].clk = clock;
	add_sub_regra[].d = ( (! add_sub));
	cout_sum_regra[].clk = clock;
	cout_sum_regra[].d = ( (((! add_sub_regra[0].q) & (cout_sum_regra[0].q $ pad_cella[13].cout)) # (cout_sum_regra[0].q & pad_cella[13].cout)), add_sub_cella[13].cout);
	inter_regrs_cin_ffa[].clk = clock;
	inter_regrs_cin_ffa[].d = inter_regrs_cina[].combout;
	pad_cell_ffa[].clk = clock;
	pad_cell_ffa[].d = pad_cella[].combout;
	const_node_aclr = aclr;
	const_node_clken = clken;
	cout = cout_sum_regra[1].q;
	result[13..0] = pad_cell_ffa[13..0].q;
END;
--VALID FILE
